---

# For Tomcat, the default JMX domain is "Catalina:", however with some deployments like embedded in spring-boot
# we can have the "Tomcat:" domain used, thus we use both MBean names for the metrics.

rules:

  - beans:
      - Catalina:type=Manager,host=localhost,context=*
      - Tomcat:type=Manager,host=localhost,context=*
    metricAttribute:
      # minor divergence from tomcat.groovy to capture metric for all deployed webapps
      context: param(context)
    mapping:
      activeSessions:
        metric: tomcat.sessions
        type: updowncounter
        unit: "{session}"
        desc: The number of active sessions

  - beans:
      - Catalina:type=GlobalRequestProcessor,name=*
      - Tomcat:type=GlobalRequestProcessor,name=*
    prefix: tomcat.
    metricAttribute:
      proto_handler: param(name)
    mapping:
      errorCount:
        metric: request.errors
        type: counter
        unit: "{error}"
        desc: The number of errors encountered
      requestCount:
        metric: requests
        type: counter
        unit: "{request}"
        desc: The total requests
      maxTime:
        metric: request.duration.max
        type: gauge
        unit: ms
        desc: Maximum time to process a request
      processingTime:
        metric: request.duration
        type: counter
        unit: ms
        desc: The total processing time
      bytesSent:
        metric: &metric network.io
        type: &type counter
        unit: &unit By
        desc: &desc The number of bytes transmitted and received
        metricAttribute:
          direction: const(sent)
      bytesReceived:
        metric: *metric
        type: *type
        unit: *unit
        desc: *desc
        metricAttribute:
          direction: const(received)

  - beans:
      - Catalina:type=ThreadPool,name=*
      - Tomcat:type=ThreadPool,name=*
    prefix: tomcat.
    metricAttribute:
      proto_handler: param(name)
    mapping:
      currentThreadCount:
        metric: &metric threads
        desc: &desc The number of threads
        type: &type gauge
        unit: &unit "{thread}"
        metricAttribute:
          state: const(idle)
      currentThreadsBusy:
        metric: *metric
        desc: *desc
        type: *type
        unit: *unit
        metricAttribute:
          state: const(busy)
