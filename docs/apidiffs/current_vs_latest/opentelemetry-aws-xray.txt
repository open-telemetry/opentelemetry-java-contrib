Comparing source compatibility of opentelemetry-aws-xray-1.51.0-SNAPSHOT.jar against opentelemetry-aws-xray-1.50.0.jar
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) AwsXrayAdaptiveSamplingConfig()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$Builder builder()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit getAnomalyCaptureLimit()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=anomalyCaptureLimit (+)
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions> getAnomalyConditions()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=anomalyConditions (+)
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) double getVersion()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=version (+)
	+++  NEW ANNOTATION: com.fasterxml.jackson.databind.annotation.JsonSerialize
		+++  NEW ELEMENT: as=io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig (+)
	+++  NEW ANNOTATION: com.fasterxml.jackson.databind.annotation.JsonDeserialize
		+++  NEW ELEMENT: builder=io.opentelemetry.contrib.awsxray.AutoValue_AwsXrayAdaptiveSamplingConfig$Builder (+)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit$Builder builder()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) int getAnomalyTracesPerSecond()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=anomalyTracesPerSecond (+)
	+++  NEW ANNOTATION: com.fasterxml.jackson.databind.annotation.JsonDeserialize
		+++  NEW ELEMENT: builder=io.opentelemetry.contrib.awsxray.AutoValue_AwsXrayAdaptiveSamplingConfig_AnomalyCaptureLimit$Builder (+)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit$Builder  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit$Builder()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit build()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit$Builder setAnomalyTracesPerSecond(int)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=anomalyTracesPerSecond (+)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) AwsXrayAdaptiveSamplingConfig$AnomalyConditions()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder builder()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.String getErrorCodeRegex()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=errorCodeRegex (+)
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.Long getHighLatencyMs()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=highLatencyMs (+)
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<java.lang.String> getOperations()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=operations (+)
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType getUsage()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=usage (+)
		+++  NEW ANNOTATION: javax.annotation.Nullable
	+++  NEW ANNOTATION: com.fasterxml.jackson.databind.annotation.JsonDeserialize
		+++  NEW ELEMENT: builder=io.opentelemetry.contrib.awsxray.AutoValue_AwsXrayAdaptiveSamplingConfig_AnomalyConditions$Builder (+)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions build()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder setErrorCodeRegex(java.lang.String)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=errorCodeRegex (+)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder setHighLatencyMs(java.lang.Long)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=highLatencyMs (+)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder setOperations(java.util.List<java.lang.String>)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=operations (+)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions$Builder setUsage(io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=usage (+)
+++  NEW CLASS: PUBLIC(+) ABSTRACT(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$Builder  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) AwsXrayAdaptiveSamplingConfig$Builder()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig build()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$Builder setAnomalyCaptureLimit(io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyCaptureLimit)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=anomalyCaptureLimit (+)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$Builder setAnomalyConditions(java.util.List<io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$AnomalyConditions>)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=anomalyConditions (+)
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$Builder setVersion(double)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonProperty
			+++  NEW ELEMENT: value=version (+)
+++  NEW ENUM: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: java.lang.constant.Constable
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: java.lang.Enum
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType NEITHER
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType SAMPLING_BOOST
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType ANOMALY_TRACE_CAPTURE
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType BOTH
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType fromValue(java.lang.String)
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonCreator
	+++  NEW METHOD: PUBLIC(+) java.lang.String getValue()
		+++  NEW ANNOTATION: com.fasterxml.jackson.annotation.JsonValue
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean isUsedForAnomalyTraceCapture(io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean isUsedForBoost(io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig$UsageType[] values()
***  MODIFIED CLASS: PUBLIC FINAL io.opentelemetry.contrib.awsxray.AwsXrayRemoteSampler  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) void adaptSampling(io.opentelemetry.sdk.trace.ReadableSpan, io.opentelemetry.sdk.trace.data.SpanData)
	+++  NEW METHOD: PUBLIC(+) void setAdaptiveSamplingConfig(io.opentelemetry.contrib.awsxray.AwsXrayAdaptiveSamplingConfig)
	+++  NEW METHOD: PUBLIC(+) void setSpanExporter(io.opentelemetry.sdk.trace.export.SpanExporter)
