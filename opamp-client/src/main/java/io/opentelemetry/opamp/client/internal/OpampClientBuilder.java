package io.opentelemetry.opamp.client.internal;

import com.github.f4b6a3.uuid.UuidCreator;
import io.opentelemetry.opamp.client.internal.impl.OpampClientImpl;
import io.opentelemetry.opamp.client.internal.impl.OpampClientState;
import io.opentelemetry.opamp.client.internal.request.service.HttpRequestService;
import io.opentelemetry.opamp.client.internal.request.service.RequestService;
import io.opentelemetry.opamp.client.internal.request.service.WebSocketRequestService;
import io.opentelemetry.opamp.client.internal.state.State;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import opamp.proto.AgentCapabilities;
import opamp.proto.AgentDescription;
import opamp.proto.AnyValue;
import opamp.proto.KeyValue;
import opamp.proto.RemoteConfigStatus;

/**
 * This class is internal and is hence not for public use. Its APIs are unstable and can change at
 * any time.
 *
 * <p>Builds an {@link OpampClient} instance.
 */
public final class OpampClientBuilder {
  private final Map<String, String> identifyingAttributes = new HashMap<>();
  private final Map<String, String> nonIdentifyingAttributes = new HashMap<>();
  private byte[] instanceUid;
  private long capabilities = 0;
  private State.EffectiveConfig effectiveConfigState;
  private RequestService service;

  OpampClientBuilder() {}

  /**
   * Sets an implementation of a {@link RequestService} to handle the request's sending process.
   * There are 2 possible options, either {@link HttpRequestService} to use HTTP, or {@link
   * WebSocketRequestService} to use WebSocket.
   *
   * @param service The request service implementation.
   * @return this
   */
  public OpampClientBuilder setRequestService(RequestService service) {
    this.service = service;
    return this;
  }

  /**
   * Sets the Agent's <a
   * href="https://github.com/open-telemetry/opamp-spec/blob/main/specification.md#agenttoserverinstance_uid">instance_uid</a>
   * value. A random one is generated by default.
   *
   * @param value The AgentToServer.instance_uid value.
   * @return this
   */
  public OpampClientBuilder setInstanceUid(byte[] value) {
    this.instanceUid = value;
    return this;
  }

  /**
   * Sets a string attribute into the <a
   * href="https://github.com/open-telemetry/opamp-spec/blob/main/specification.md#agentdescriptionidentifying_attributes">identifying_attributes</a>
   * field.
   *
   * @param key The attribute key.
   * @param value The attribute value.
   * @return this
   */
  public OpampClientBuilder setIdentifyingAttribute(String key, String value) {
    identifyingAttributes.put(key, value);
    return this;
  }

  /**
   * Sets an attribute into the <a
   * href="https://github.com/open-telemetry/opamp-spec/blob/main/specification.md#agentdescriptionnon_identifying_attributes">non_identifying_attributes</a>
   * field.
   *
   * @param key The attribute key
   * @param value The attribute value.
   * @return this
   */
  public OpampClientBuilder setNonIdentifyingAttribute(String key, String value) {
    nonIdentifyingAttributes.put(key, value);
    return this;
  }

  /**
   * Adds the AcceptsRemoteConfig and ReportsRemoteConfig capabilities to the Client so that the
   * Server can offer remote config values as explained <a
   * href="https://github.com/open-telemetry/opamp-spec/blob/main/specification.md#agentdescriptionidentifying_attributes">here</a>.
   *
   * @return this
   */
  public OpampClientBuilder enableRemoteConfig() {
    capabilities =
        capabilities
            | AgentCapabilities.AgentCapabilities_AcceptsRemoteConfig.getValue()
            | AgentCapabilities.AgentCapabilities_ReportsRemoteConfig.getValue();
    return this;
  }

  /**
   * Adds the ReportsEffectiveConfig capability to the Client so that the Server expects the
   * Client's effective config report, as explained <a
   * href="https://github.com/open-telemetry/opamp-spec/blob/main/specification.md#agentdescriptionidentifying_attributes">here</a>.
   *
   * @return this
   */
  public OpampClientBuilder enableEffectiveConfigReporting() {
    capabilities =
        capabilities | AgentCapabilities.AgentCapabilities_ReportsEffectiveConfig.getValue();
    return this;
  }

  /**
   * Sets the effective config state implementation. It should call {@link
   * State.EffectiveConfig#notifyUpdate()} whenever it has changes that have not been sent to the
   * server.
   *
   * @param effectiveConfigState The state implementation.
   * @return this
   */
  public OpampClientBuilder setEffectiveConfigState(State.EffectiveConfig effectiveConfigState) {
    this.effectiveConfigState = effectiveConfigState;
    return this;
  }

  public OpampClient build() {
    if (service == null) {
      throw new NullPointerException(
          "The request service is not set. You must provide it by calling setRequestService()");
    }
    List<KeyValue> protoIdentifyingAttributes = new ArrayList<>();
    List<KeyValue> protoNonIdentifyingAttributes = new ArrayList<>();
    identifyingAttributes.forEach(
        (key, value) -> protoIdentifyingAttributes.add(createKeyValue(key, value)));
    nonIdentifyingAttributes.forEach(
        (key, value) -> protoNonIdentifyingAttributes.add(createKeyValue(key, value)));
    if (instanceUid == null) {
      instanceUid = createRandomInstanceUid();
    }
    if (effectiveConfigState == null) {
      effectiveConfigState = createEffectiveConfigNoop();
    }
    OpampClientState state =
        new OpampClientState(
            new State.RemoteConfigStatus(new RemoteConfigStatus.Builder().build()),
            new State.SequenceNum(1L),
            new State.AgentDescription(
                new AgentDescription.Builder()
                    .identifying_attributes(protoIdentifyingAttributes)
                    .non_identifying_attributes(protoNonIdentifyingAttributes)
                    .build()),
            new State.Capabilities(capabilities),
            new State.InstanceUid(instanceUid),
            new State.Flags(0L),
            effectiveConfigState);
    return OpampClientImpl.create(service, state);
  }

  private State.EffectiveConfig createEffectiveConfigNoop() {
    return new State.EffectiveConfig() {
      @Override
      public opamp.proto.EffectiveConfig get() {
        return null;
      }
    };
  }

  private KeyValue createKeyValue(String key, String value) {
    return new KeyValue.Builder()
        .key(key)
        .value(new AnyValue.Builder().string_value(value).build())
        .build();
  }

  public static byte[] createRandomInstanceUid() {
    UUID uuid = UuidCreator.getTimeOrderedEpoch();
    ByteBuffer buffer = ByteBuffer.allocate(16);
    buffer.putLong(uuid.getMostSignificantBits());
    buffer.putLong(uuid.getLeastSignificantBits());
    return buffer.array();
  }
}
