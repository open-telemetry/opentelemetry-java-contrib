apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    repositories {
        maven {
            url = "$rootDir/build/repo"
        }
    }

    publications {
        maven(MavenPublication) {
            if (project.tasks.findByName('shadowJar') != null && findProperty('shadowPublish')) {
                project.shadow.component(it)
            } else {
                from components.java
            }

            afterEvaluate {
                artifactId = artifactPrefix(archivesBaseName) + archivesBaseName
            }

            pom {
                name = 'OpenTelemetry Java Contrib'
                packaging = 'jar'
                url = 'https://github.com/open-telemetry/opentelemetry-java-contrib'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'opentelemetry'
                        name = 'OpenTelemetry'
                        url = "https://github.com/open-telemetry/opentelemetry-java-contrib/issues"
                    }
                }

                scm {
                    connection = 'scm:git:git@github.com:open-telemetry/opentelemetry-java-contrib.git'
                    developerConnection = 'scm:git:git@github.com:open-telemetry/opentelemetry-java-contrib.git'
                    url = 'git@github.com:open-telemetry/opentelemetry-java-contrib.git'
                }

                afterEvaluate {
                    // these properties aren't available until evaluated
                    if (project.findProperty('libraryName') != null) {
                        name = project.getProperty('libraryName')
                    }
                    description = project.description
                }
            }
        }
    }
}

def artifactPrefix(archivesBaseName) {
    if (archivesBaseName.startsWith(rootProject.name)) {
        return ''
    }
    return rootProject.name
}

task mavenPublish {
    allprojects{
        afterEvaluate { project ->
            project.tasks.forEach { task ->
                if (task.name.endsWith('publishMavenPublicationToMavenRepository')) {
                    finalizedBy task
                }
            }
        }
    }
}

task ossSnapshot {
    if (version.toString().endsWith("-SNAPSHOT")) {
        it.finalizedBy tasks.publishToSonatype
    } else {
        it.doFirst {
            println "ossSnapshot: ${version} isn't a snapshot.  Not releasing."
        }
    }
}

task otelRelease {
    if (!version.toString().endsWith("-SNAPSHOT")) {
        // closeSonatypeStagingRepository is a dynamically registered task and cannot be referenced directly
        it.finalizedBy "publishToSonatype", rootProject.tasks.named("closeSonatypeStagingRepository")
    } else {
        it.doFirst {
            println "otelRelease: ${version} is a snapshot.  Not releasing."
        }
    }
}

// At this time signing depends on properly configured gradle properties for registered public key:
// https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials.
signing {
    sign publishing.publications.maven
}
